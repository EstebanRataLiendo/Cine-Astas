// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
}

model Image {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  publicId    String    // ID de Cloudinary
  description String?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageId   String   @db.ObjectId
  image     Image    @relation(fields: [imageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}  

model Movie {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  year        Int
  genre       String
  language    String
  duration    Int  // Duraci√≥n en minutos
  imageUrl    String?
  trailerUrl  String?
  description String?
  screenings  Screening[]
}

model Hall {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  capacity  Int
  screenings Screening[]
}

model Screening {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  movieId   String   @db.ObjectId
  hallId    String   @db.ObjectId
  schedule  DateTime
  price     Float
  movie     Movie   @relation(fields: [movieId], references: [id])
  hall      Hall    @relation(fields: [hallId], references: [id])
  bookings  Booking[]
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  screeningId String   @db.ObjectId
  seats       Int
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  screening   Screening @relation(fields: [screeningId], references: [id])
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}

enum BookingStatus {
  PENDING
  PAID
  CANCELLED
}
